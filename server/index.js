/* jshint node: true */
'use strict';

/*
This file was generated by generator-ffwd,
you probably should not modify it
*/

var utils = require('ffwd-utils/server');
var debug = utils.debug('ffwd-menu');
var yfm = require('yfm');
var ymlFileExp = /\.(yml|yaml)$/i;


/**
 * An example of feature implementation
 * @exports example-feature
 * @memberOf FFWD.server
 * @param  {Object} config ...
 * @return {Object}        ...
 */
module.exports = function(config) {
  config = config || {};

  config.pages = config.pages || 'pages';
  config.navigation = config.navigation || {};

  var app = config.app;
  var lib = require('ffwd-menu');
  var utils = require('ffwd-utils/server');
  var _ = utils._;
  var _navCache;

  // debug('config', config);

  config.cache = typeof config.cache !== 'undefined' ?
                  config.cache :
                  (app.get('env') !== 'development');
  debug('cache %s', config.cache !== false);

  /**
   * Builds the navigation for a response.
   * @param  {connect.Request}  req  ...
   * @param  {connect.Response} res  ...
   * @param  {Function} next         ...
   */
  function responseMenu(req, res, next) {
    if (!_.isFunction(next)) {
      console.trace('responseMenu next argument is not a function');
      console.info('arguments', [[arguments]]);
    }

    function done(err) {
      var urlPath = req.url.split('?').shift();
      debug('initialize response menu at %s', urlPath);
      res.menu = new lib.Menu({
        path: urlPath,
        links: _navCache
      });
      next(err);
    }

    if (_navCache && config.cache !== false) {
      return done();
    }

    config.navigation = 'pages/navigation.yml';

    try {
      // assume that a string is a file path
      if (_.isString(config.navigation)) {
        // handle yaml
        if (ymlFileExp.test(config.navigation)) {
          _navCache = yfm.read(config.navigation).context;
        }
        // handle js, node and json
        else {
          _navCache = require(config.navigation);
        }
      }

      // handle the possiblity of using a function
      else {
        _navCache = _.result(config, 'navigation');
      }
    }
    catch (err) {
      return done(err);
    }

    done();
  }

  _.extend(lib, {
    responseMenu: responseMenu
  });

  return lib;
};
